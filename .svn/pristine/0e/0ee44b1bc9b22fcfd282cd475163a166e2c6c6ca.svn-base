package com.capitalbio.oemv2.myapplication.Fragment;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Fragment;
import android.app.NotificationManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.android.pc.ioc.db.table.KeyValue;
import com.bumptech.glide.Glide;
import com.capitalbio.oemv2.myapplication.Activity.LoginActivity;
import com.capitalbio.oemv2.myapplication.Activity.PersonalDetailsAcitivity;
import com.capitalbio.oemv2.myapplication.Activity.SettingActivity;
import com.capitalbio.oemv2.myapplication.Activity.UserHelpActivity;
import com.capitalbio.oemv2.myapplication.Base.MyApplication;
import com.capitalbio.oemv2.myapplication.Bean.LoginUser;
import com.capitalbio.oemv2.myapplication.BraceleteLib.BraceleteDevices;
import com.capitalbio.oemv2.myapplication.Const.Base_Url;
import com.capitalbio.oemv2.myapplication.Devices.BloodPressDevice.ByteUtil;
import com.capitalbio.oemv2.myapplication.NetUtils.HttpTools;
import com.capitalbio.oemv2.myapplication.NetUtils.NetTool;
import com.capitalbio.oemv2.myapplication.QR.MipcaActivityCapture;
import com.capitalbio.oemv2.myapplication.R;
import com.capitalbio.oemv2.myapplication.Utils.OemLog;
import com.capitalbio.oemv2.myapplication.Utils.PreferencesUtils;
import com.capitalbio.oemv2.myapplication.Utils.Utility;
import com.capitalbio.oemv2.myapplication.View.GlideCircleTransform;
import com.capitalbio.oemv2.myapplication.View.UserinfoPopupWindow;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;

import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.db.sqlite.WhereBuilder;
import org.xutils.ex.DbException;

import java.security.Key;

import cz.msebera.android.httpclient.Header;

/**
 * Created by chengkun on 15-11-25.
 */
public class SlidingMenuFragment extends Fragment implements View.OnClickListener{

    private ScrollView llParentView;
    private ImageView ivSlideUserPhoto;
    private String TAG = "SlidingMenuFragment";
    private Context context;
    private TextView username;


    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        llParentView = (ScrollView) inflater.inflate(R.layout.fg_slidingmenu, null);
        context = MyApplication.getInstance();
        initView();
        return llParentView;
    }


    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }

    @Override
    public void onStart() {
        super.onStart();
    }

    @Override
    public void onResume() {
        super.onResume();
            LoginUser user = MyApplication.getInstance().getCurrentUser();
            Log.i(TAG, "IMAGELOADER_NO");
            if (user != null) {
                byte[] bytePic = user.getHeadPic();
                Log.i(TAG, bytePic == null ? "null" : "has");
                if(bytePic!=null && bytePic.length>0){
                  /*  Bitmap bitmap = ByteUtil.byteToBitmap(bytePic);
                    ivSlideUserPhoto.setImageBitmap(bitmap);*/
                    Glide.with(context)
                            .load(bytePic)
                            .transform(new GlideCircleTransform(context)).into(ivSlideUserPhoto);
                }else{
                    Glide.with(context)
                            .load(R.drawable.ic_scene)
                            .transform(new GlideCircleTransform(context)).into(ivSlideUserPhoto);
                }

            }

    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    private void initView() {
        ivSlideUserPhoto = (ImageView) llParentView.findViewById(R.id.iv_slide_user_photo);
        username = (TextView) llParentView.findViewById(R.id.tv_userName);
        ivSlideUserPhoto.setOnClickListener(this);
        llParentView.findViewById(R.id.ll_logout).setOnClickListener(this);
        String name = MyApplication.getInstance().getCurrentUserName();
        if(name != null && !"".equals(name) ){
            username.setText(name);
        }else{
            username.setText("颐健谱");
        }
        llParentView.findViewById(R.id.rl_userhelp).setOnClickListener(this);

        //设置
        llParentView.findViewById(R.id.rl_slidingmenue_setting).setOnClickListener(this);



    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {

            case R.id.rl_userhelp:
                Utility.startActivity(context, UserHelpActivity.class);
                 break;
            case R.id.iv_slide_user_photo:
                if (ContextCompat.checkSelfPermission(getActivity(),
                        Manifest.permission.CAMERA)
                        != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(getActivity(),
                            new String[]{Manifest.permission.CAMERA},
                            1
                    );
                }else{
                    startUserInfoActivity();

                }



             //   showPopwindow();

                break;
            case R.id.ll_logout:
                AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
                builder.setMessage("确定退出吗？");
                builder.setTitle("提示");
                builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                       /* if (NetTool.isNetwork(context, true)) {
                            logout();

                        }*/

                        //TODO 清除数据
                        try{
                            LoginUser user = MyApplication.getDB().selector(LoginUser.class).where("isLogin","=","true").findFirst();
                            user.setIsLogin("false");
                            user.setExitlogintime(System.currentTimeMillis());
                            MyApplication.getDB().saveOrUpdate(user);
                            MyApplication.getInstance().exit();
                        }
                        catch (DbException e) {
                            e.printStackTrace();
                        }

                        BraceleteDevices.getInstance().disconnect();
                        //取消所有通知
                        NotificationManager nm = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
                        nm.cancelAll();
                        Utility.startActivity(context, LoginActivity.class);
                        dialog.dismiss();
                        Toast.makeText(context, "注销成功", Toast.LENGTH_SHORT).show();

                    }
                });
                builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override


                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }

                });
                builder.create().show();

                break;
            //设置
            case R.id.rl_slidingmenue_setting:
                Utility.startActivity(getActivity(), SettingActivity.class);
                break;
        }
    }

    private void startUserInfoActivity() {
        Intent intent = new Intent(getActivity(), PersonalDetailsAcitivity.class);
        startActivity(intent);
    }
    //注销
    public void logout(){


        try {
            //构造请求json对象
            JSONObject jsonObject = new JSONObject();

            jsonObject.put("apikey", MyApplication.getInstance().apikey);//所有接口必填
            Log.e("apikey","apikey " + MyApplication.getInstance().apikey);
            jsonObject.put("username", MyApplication.getInstance().getCurrentUserName());
            jsonObject.put("token", MyApplication.getInstance().getCurentToken());
            OemLog.log(TAG, ".."+jsonObject.toString());
            //请求短信验证码
            HttpTools.post(context, Base_Url.Url_Base + Base_Url.logout_url, jsonObject, new AsyncHttpResponseHandler() {
                @Override
                public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
                    String result = new String(responseBody);
                    OemLog.log(TAG, result);
                    try {
                        JSONObject jsonObject = new JSONObject(result);
                        int code = jsonObject.optInt("code");
                        if(code==11){
                            MyApplication.getInstance().exit();
                            Toast.makeText(context,"用户未登陆,请重新登陆",Toast.LENGTH_SHORT).show();
                            Utility.startActivity(context,LoginActivity.class);
                        }
                        else if(code==4){
                            Toast.makeText(context,"未找到APIKEY",Toast.LENGTH_SHORT).show();
                        }
                        else if(code == 0){
                            Toast.makeText(context, "注销成功", Toast.LENGTH_SHORT).show();
                            //TODO 清除数据
                            try{
                                LoginUser user = MyApplication.getDB().selector(LoginUser.class).where("isLogin","=","true").findFirst();
                                user.setIsLogin("false");
                                user.setExitlogintime(System.currentTimeMillis());
                                MyApplication.getDB().saveOrUpdate(user);
                                MyApplication.getInstance().exit();
                            }
                            catch (DbException e) {
                                e.printStackTrace();
                            }

                            BraceleteDevices.getInstance().disconnect();
                            //取消所有通知
                            NotificationManager nm = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
                            nm.cancelAll();
                            Utility.startActivity(context, LoginActivity.class);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }

                @Override
                public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
                    OemLog.log(TAG, "服务器请求失败");
                }
            });

        } catch (JSONException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case 1: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted, yay! Do the
                    // contacts-related task you need to do.
                    startUserInfoActivity();
                } else {
                    Toast.makeText(context,"没有相机权限！",Toast.LENGTH_SHORT).show();
                    // permission denied, boo! Disable the
                    // functionality that depends on this permission.
                }
                return;
            }
        }
    }
}

