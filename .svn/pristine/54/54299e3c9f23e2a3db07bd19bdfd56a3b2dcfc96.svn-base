package com.capitalbio.oemv2.myapplication.Activity;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.os.Build;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.capitalbio.oemv2.myapplication.Const.Const;
import com.capitalbio.oemv2.myapplication.R;
import com.capitalbio.oemv2.myapplication.View.SpinnerLoader;

/**
 * Created by chengkun on 15-11-4.
 */
public class MainActivity extends BaseActivity {


    public static final String TAG = "MainActivity";
    private RelativeLayout fmMainView;
    private ImageView icBracelet;
    private Bitmap bmBracelet;
    private BitmapDrawable bmBraceletDrable;
    private SpinnerLoader spinnerView;
    private GestureDetector mGestureDetector;

    private class DefaultGestureListener extends GestureDetector.SimpleOnGestureListener {

        // Touch down时触发
        @Override
        public boolean onDown(MotionEvent e) {
            Log.d(TAG, "onDown");
            return super.onDown(e);
        }

        // 在Touch down之后一定时间（115ms）触发
        @Override
        public void onShowPress(MotionEvent e) {
            Log.d(TAG, "onShowPress");
        }

        /**
         * 这个方法不同于onSingleTapUp，他是在GestureDetector确信用户在第一次触摸屏幕后，没有紧跟着第二次触摸屏幕，也就是不是“双击”的时候触发
         * */
        @Override
        public boolean onSingleTapUp(MotionEvent e) {
            Log.d(TAG, "onSingleTapUp");
            return super.onSingleTapUp(e);
        }

        /**
         * @param e1 The first down motion event that started the scrolling.
         @param e2 The move motion event that triggered the current onScroll.
         @param distanceX The distance along the X axis(轴) that has been scrolled since the last call to onScroll. This is NOT the distance between e1 and e2.
         @param distanceY The distance along the Y axis that has been scrolled since the last call to onScroll. This is NOT the distance between e1 and e2.
         无论是用手拖动view，或者是以抛的动作滚动，都会多次触发 ,这个方法在ACTION_MOVE动作发生时就会触发 参看GestureDetector的onTouchEvent方法源码
          * */
        // 滑动时触发
        @Override
        public boolean onScroll(MotionEvent e1, MotionEvent e2,
                                float distanceX, float distanceY) {

            Log.d(TAG, "onScroll");

            if((e2.getX() - e1.getX()) > 0) {
                /*mSpinerView.setBigStep(-6);
                mSpinerView.setDirection(10);*/
            } else if (e2.getX() - e1.getX() < -30){
                spinnerView.setBigStep(2);
                spinnerView.setDirection(Const.MAIN_VIEW_SLIP_DIRECTION_LEFT);
                spinnerView.invalidate();
            }

            return super.onScroll(e1, e2, distanceX, distanceY);
        }
        /**
         * @param e1 第1个ACTION_DOWN MotionEvent 并且只有一个
         * @param e2 最后一个ACTION_MOVE MotionEvent
         * @param velocityX X轴上的移动速度，像素/秒
         * @param velocityY Y轴上的移动速度，像素/秒
         * 这个方法发生在ACTION_UP时才会触发 参看GestureDetector的onTouchEvent方法源码
         *
         * */
        // 滑动一段距离，up时触发
        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
                               float velocityY) {

            Log.d(TAG, "onFling");

            return super.onFling(e1, e2, velocityX, velocityY);
        }

        // 长按后触发(Touch down之后一定时间（500ms）)
        @Override
        public void onLongPress(MotionEvent e) {

            Log.d(TAG, "onLongPress");
        }

        @Override
        public boolean onDoubleTap(MotionEvent e) {
            // TODO Auto-generated method stub
            return super.onDoubleTap(e);
        }

        @Override
        public boolean onDoubleTapEvent(MotionEvent e) {
            // TODO Auto-generated method stub
            return super.onDoubleTapEvent(e);
        }

        @Override
        public boolean onSingleTapConfirmed(MotionEvent e) {
            // TODO Auto-generated method stub
            return super.onSingleTapConfirmed(e);
        }

    }




    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    @Override
    protected void initChildLayout() {
        super.initChildLayout();

        //在activity中设置手势监听
        mGestureDetector = new GestureDetector(new DefaultGestureListener());

        setNavigateBarBackGround(R.drawable.bg_main);
        ivSplitLine.setBackgroundResource(R.color.mainSplitLine);
        fmMainView = (RelativeLayout) View.inflate(this, R.layout.activity_main, null);

        //设置对应设备大圈的图标
        icBracelet = (ImageView) fmMainView.findViewById(R.id.ic_slected_device);
        bmBracelet = BitmapFactory.decodeResource(getResources(), R.drawable.ic_bracelet);
        bmBraceletDrable = new BitmapDrawable(bmBracelet);
        icBracelet.setBackground(bmBraceletDrable);

        //取得滚轮view的引用
        spinnerView = (SpinnerLoader) fmMainView.findViewById(R.id.slid_spinner);
        llBody.addView(fmMainView);
    }


    private static Bitmap small(Bitmap bitmap) {
        Matrix matrix = new Matrix();
        matrix.postScale(2.3f,2.3f); //长和宽放大缩小的比例
        Bitmap resizeBmp = Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
        return resizeBmp;
    }


    @Override
    public boolean onTouchEvent(MotionEvent event) {
        Log.d(TAG, "onTouchEvent");
        return mGestureDetector.onTouchEvent(event);
    }

    /**
     * 根据手机的分辨率从 dp 的单位 转成为 px(像素)
     */
    public static double dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        Log.d("MyTest", " scale is " + scale);
        return dpValue * scale/2.78;
    }

}
