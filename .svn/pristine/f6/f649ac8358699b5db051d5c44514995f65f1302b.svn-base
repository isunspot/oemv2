package com.capitalbio.oemv2.myapplication.Devices.AirCatDevices.esptouch.udp;

import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiManager;
import android.util.Log;

import com.capitalbio.oemv2.myapplication.Activity.AircatScanResultActivtity;
import com.capitalbio.oemv2.myapplication.Base.MyApplication;
import com.capitalbio.oemv2.myapplication.Devices.AirCatDevices.esptouch.ISearchMacCallBack;
import com.capitalbio.oemv2.myapplication.Devices.AirCatDevices.esptouch.ISetTargetApCallBack;
import com.capitalbio.oemv2.myapplication.Utils.Utils;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.Arrays;

public class UDPSocketServer {

	private static final String TAG = "UDPSocketServer";
	private DatagramPacket mReceivePacket;
	private DatagramSocket mServerSocket;
	private Context mContext = MyApplication.getInstance();
	private WifiManager.MulticastLock mLock;
	private final byte[] buffer;
	private volatile boolean mIsClosed;
	private ISetTargetApCallBack setTargetApCallBack;
	private ISearchMacCallBack searchMacCallBack;

	private IUdpDataGetComeplete udpDataGetComeplete;

	private synchronized void acquireLock() {
		if (mLock != null && !mLock.isHeld()) {
			mLock.acquire();
		}
	}

	private synchronized void releaseLock() {
		if (mLock != null && mLock.isHeld()) {
			try {
				mLock.release();
			} catch (Throwable th) {
                // ignoring this exception, probably wakeLock was already released
            }
		}
	}

	/**
	 * Constructor of UDP Socket Server
	 * 
	 * @param port
	 *            the Socket Server port
	 * @param socketTimeout
	 *            the socket read timeout
	 * @param context
	 *            the context of the Application
	 */
	public UDPSocketServer(int port, int socketTimeout, Context context, ISetTargetApCallBack setTargetApCallBack, ISearchMacCallBack searchMacCallBack) {

		//新增加的回调接口
		this.setTargetApCallBack = setTargetApCallBack;
		this.searchMacCallBack = searchMacCallBack;
		this.mContext = context;
		this.buffer = new byte[64];
		this.mReceivePacket = new DatagramPacket(buffer, 64);
		try {
			this.mServerSocket = new DatagramSocket(port);
			this.mServerSocket.setSoTimeout(socketTimeout);
			this.mIsClosed = false;
			WifiManager manager = (WifiManager) mContext
					.getSystemService(Context.WIFI_SERVICE);
			mLock = manager.createMulticastLock("test wifi");
			Log.d(TAG, "mServerSocket is created, socket read timeout: "
					+ socketTimeout + ", port: " + port);
		} catch (IOException e) {
			Log.e(TAG, "IOException");
			e.printStackTrace();
		}
	}

	/**
	 * Set the socket timeout in milliseconds
	 * 
	 * @param timeout
	 *            the timeout in milliseconds or 0 for no timeout.
	 * @return true whether the timeout is set suc
	 */
	public boolean setSoTimeout(int timeout) {
		try {
			this.mServerSocket.setSoTimeout(timeout);
			return true;
		} catch (SocketException e) {
			e.printStackTrace();
		}
		return false;
	}

	/**
	 * Receive one byte from the port and convert it into String
	 * 
	 * @return
	 */
	public byte receiveOneByte() {
		Log.d(TAG, "receiveOneByte() entrance");
		try {
			acquireLock();
			mServerSocket.receive(mReceivePacket);
			Log.d(TAG, "receive: " + (0 + mReceivePacket.getData()[0]));
			return mReceivePacket.getData()[0];
		} catch (IOException e) {
			e.printStackTrace();
		}
		return Byte.MIN_VALUE;
	}
	
	/**
	 * Receive specific length bytes from the port and convert it into String
	 * 21,24,-2,52,-102,-93,-60
	 * 15,18,fe,34,9a,a3,c4
	 * @return
	 */
	public byte[] receiveSpecLenBytes(int len) {
		Log.d("receiveSpecLenBytes", "receiveSpecLenBytes() entrance: len = " + len);
		try {
			acquireLock();
			mServerSocket.receive(mReceivePacket);
			byte[] recDatas = Arrays.copyOf(mReceivePacket.getData(), mReceivePacket.getLength());
			Log.d("receiveSpecLenBytes", "byte is " + Arrays.toString(recDatas));
			Log.d(TAG, "received len : " + recDatas.length);
			for (int i = 0; i < recDatas.length; i++) {
				Log.e(TAG, "recDatas[" + i + "]:" + recDatas[i]);
			}
			Log.e(TAG, "receiveSpecLenBytes: " + new String(recDatas));
			if (recDatas.length != len) {
				Log.w(TAG,
						"received len is different from specific len, return null");
				return null;
			}
			return recDatas;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void interrupt() {
		Log.i(TAG, "USPSocketServer is interrupt");
		close();
	}

	public synchronized void close() {
		if (!this.mIsClosed) {
			Log.e(TAG, "mServerSocket is closed");
			mServerSocket.close();
			releaseLock();
			this.mIsClosed = true;
		}
	}

	@Override
	protected void finalize() throws Throwable {
		close();
		super.finalize();
	}
	
	/**
     * Receive specific length bytes from the port and convert it into String
     * 21,24,-2,52,-102,-93,-60
     * 15,18,fe,34,9a,a3,c4
     * @return
     */
    public byte[] receiveMacBroadcast(int len) {
        Log.d(TAG, "receiveSpecLenBytes() entrance: len = " + len);
        try {
            acquireLock();
            mServerSocket.receive(mReceivePacket);
            byte[] recDatas = Arrays.copyOf(mReceivePacket.getData(), mReceivePacket.getLength());
            Log.d("NewTest", "byte is " + Arrays.toString(recDatas));
            Log.d(TAG, "received len : " + recDatas.length);
            for (int i = 0; i < recDatas.length; i++) {
                Log.e(TAG, "recDatas[" + i + "]:" + recDatas[i]);
            }
            Log.e(TAG, "receiveSpecLenBytes: " + new String(recDatas));
            if (recDatas.length != len) {
                Log.w(TAG,
                        "received len is different from specific len, return null");
                return null;
            }
            return recDatas;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

	public byte[] receiveMacSpecLenBytes(int len) {
		Log.d("receiveMacSpecLenBytes", "receiveSpecLenBytes() entrance: len = " + len);
		try {
			acquireLock();
			if (mServerSocket != null) {
				mServerSocket.receive(mReceivePacket);
				byte[] recDatas = Arrays.copyOf(mReceivePacket.getData(), mReceivePacket.getLength());
				//增加回调接口

				if (recDatas.length != 14) {
					return null;
				}

				Log.d("receiveMacSpecLenBytes", "byte is " + Arrays.toString(recDatas));
				Log.d(TAG, "received len : " + recDatas.length);
				for (int i = 0; i < recDatas.length; i++) {
					Log.e(TAG, "recDatas[" + i + "]:" + recDatas[i]);
				}
				Log.e(TAG, "receiveSpecLenBytes: " + new String(recDatas));
				Intent addIntent = new Intent(mContext, AircatScanResultActivtity.class);
				addIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				addIntent.putExtra("result", Utils.byteToMac(recDatas));
				mContext.startActivity(addIntent);
				if (searchMacCallBack != null) {
					searchMacCallBack.onSearchMacResult(recDatas);
				}
				if (udpDataGetComeplete != null) {
					udpDataGetComeplete.onDataGetComeplete();
				}
				if (recDatas.length != len) {
					Log.w(TAG,
							"received len is different from specific len, return null");
					return null;
				}
				return recDatas;
			} else {
				return null;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void setUdpDataGetComeplete(IUdpDataGetComeplete udpDataGetComeplete) {
		this.udpDataGetComeplete = udpDataGetComeplete;
	}

}
