package com.capitalbio.oemv2.myapplication.Fragment;

import android.content.Intent;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.capitalbio.oemv2.myapplication.Activity.LoginActivity;
import com.capitalbio.oemv2.myapplication.Base.MyApplication;
import com.capitalbio.oemv2.myapplication.Bean.BraceleteHistory;
import com.capitalbio.oemv2.myapplication.Bean.BraceleteJson;
import com.capitalbio.oemv2.myapplication.Bean.SportDataDetailBean;
import com.capitalbio.oemv2.myapplication.Bean.SportDataTotalBean;
import com.capitalbio.oemv2.myapplication.Const.Base_Url;
import com.capitalbio.oemv2.myapplication.Const.BraceleteConst;
import com.capitalbio.oemv2.myapplication.Const.Const;
import com.capitalbio.oemv2.myapplication.Devices.Bracelete.DevicesDataObserver;
import com.capitalbio.oemv2.myapplication.Devices.Bracelete.ISportDataCallback;
import com.capitalbio.oemv2.myapplication.NetUtils.HistoryDownd;
import com.capitalbio.oemv2.myapplication.NetUtils.HttpTools;
import com.capitalbio.oemv2.myapplication.NetUtils.NetTool;
import com.capitalbio.oemv2.myapplication.R;
import com.capitalbio.oemv2.myapplication.Utils.BraceleteDataService;
import com.capitalbio.oemv2.myapplication.Utils.Common_dialog;
import com.capitalbio.oemv2.myapplication.Utils.OemLog;
import com.capitalbio.oemv2.myapplication.Utils.PreferencesUtils;
import com.capitalbio.oemv2.myapplication.Utils.TimeStampUtil;
import com.capitalbio.oemv2.myapplication.View.StepMarkerView;
import com.capitalbio.oemv2.myapplication.View.TasksCompletedView;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.highlight.Highlight;
import com.github.mikephil.charting.listener.OnChartValueSelectedListener;
import com.loopj.android.http.AsyncHttpResponseHandler;

import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.ex.DbException;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import cz.msebera.android.httpclient.Header;

/**
 * 日运动
 * Created by wxy on 15-11-26.
 */
public class BraceleteFragmentDay extends BaseFragment  implements OnChartValueSelectedListener{

    public static final String TAG = "BraceleteFragmentDay";

    public static final int UPLOAD_SPORT_TOTAL_DATA = 3500;

    private TasksCompletedView arcView;//progress
    private TextView tv_distance,tv_kal,tv_hours;
    private TextView tv_cur_step,tv_goal;
    private BarChart mChart;
    private Typeface mtf;
    View view;
    private int goal;

    private int oldSteps = 0;

    private int newSteps = 0;

    private List<BraceleteHistory> sportDataDays;
    private  BraceleteHistory sportTotalData;//每天的运动总信息
    private String curSelectDate;//  当前选中的日期
    private String[] mTimes ={
            "0:00","1:00","2:00","3:00",
            "4:00","5:00","6:00","7:00",
            "8:00","9:00","10:00","11:00",
            "12:00","13:00","14:00","15:00",
            "16:00","17:00","18:00","19:00",
            "20:00","21:00","22:00","23:00",
    };

    private JSONObject sportDataTotalJson = new JSONObject();

    private JSONObject sportDataTotalUploadJson = new JSONObject();

    private SportDataTotalBean sportDataTotalBean;

    Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            SportDataTotalBean sportDataTotalBean = (SportDataTotalBean) msg.obj;
            //tv_goal.setText("目标 "+sportDataTotalBean.getTargetCal());
            int steps = sportDataTotalBean.getSteps();

            float distance= (float)sportDataTotalBean.getDistance()/1000;
            DecimalFormat df = new DecimalFormat("#0.00");//格式化小数
            String s = df.format(distance);//返回的是String类型
            String curday = TimeStampUtil.currTime2(1);
            //在当天数据与手还保持一致
            if(BraceleteConst.day.equals(curday)) {
                tv_cur_step.setText(steps + "");
                tv_distance.setText(s + "千米");
                tv_kal.setText(sportDataTotalBean.getCal() + "千卡");
                float dis = s==null?0:Float.parseFloat(s);
                float h = Const.MIN_PERkM * dis /60;
                tv_hours.setText(df.format(h) + "小时");
                arcView.setProgressInfo(steps, goal, steps * 100 / goal);
                PreferencesUtils.putInt(MyApplication.getInstance(), "bracelete_current_steps", steps);


                if (sportDataTotalBean != null) {
                    if (sportDataTotalBean.getSteps() > oldSteps) {
                        uploadSportDataTotal();
                        oldSteps = sportDataTotalBean.getSteps();
                    }
                }


            }
        }
    };

    private DevicesDataObserver devicesDataObserver;
    private ISportDataCallback sportDataCallback;
    @Override
    protected View loadViewLayout(LayoutInflater inflater, ViewGroup container) {
        view = inflater.inflate(R.layout.fg_bracelete_day,container,false);
        return view;
    }

    @Override
    protected void findViewById(View view) {
        //
        arcView = (TasksCompletedView) view.findViewById(R.id.arcView);
        tv_distance = (TextView) view.findViewById(R.id.tv_distance);
        tv_kal = (TextView) view.findViewById(R.id.tv_kal);
        tv_hours = (TextView) view.findViewById(R.id.tv_hours);
        tv_cur_step =(TextView) view.findViewById(R.id.tv_cur_step);
        tv_goal =(TextView) view.findViewById(R.id.tv_goal);

        mChart = (BarChart)view.findViewById(R.id.barchart);

        mChart.setBackgroundColor(Color.WHITE);

    }

    @Override
    public void onClick(View view) {

    }

    @Override
    protected void processLogic() {
        String steps =PreferencesUtils.getString(mContext, MyApplication.getInstance().getCurrentUserName()+"goal_steps","5000");
        goal = Integer.valueOf(steps);
        tv_goal.setText("目标：" + steps + "步");
        //arcView.setProgressInfo(30, 100,30);
        arcView.setProgressInfo(0, Integer.valueOf(steps), 0);
        initchar();
        devicesDataObserver =  DevicesDataObserver.getObserver();
        sportDataCallback = new ISportDataCallback() {
            @Override
            public void onLoadData(SportDataTotalBean sportDataTotalBean) {
                Log.i("bracelete", "load data" + sportDataTotalBean);

              //  this.sportDataTotalBean = sportDataTotalBean;

                Message msg = new Message();
                msg.obj = sportDataTotalBean;
                handler.sendMessage(msg);

            }
        };
        devicesDataObserver.registerObserver(sportDataCallback);
        getDayHistoryData();

    }

    private void getDayHistoryData() {
        Log.i("sportday", "传入日期" + BraceleteConst.day);
        sportTotalData = BraceleteDataService.getSportTotalDataDayDb(BraceleteConst.day);
        sportDataDays = BraceleteDataService.getSportDataDayDb(BraceleteConst.day);

        if(sportDataDays!=null&&sportDataDays.size()>0){
            OemLog.log("sportday","search by db");

            setData(sportDataDays);
            mChart.invalidate();

            setTextInfo();


        } else {
            OemLog.log("sportday", "search by net");
            if(NetTool.isNetwork(mContext, true)){
                getCountSplitBet(BraceleteConst.day);
            }
        }
    }

    private void setTextInfo() {
        String curday = TimeStampUtil.currTime2(1);
        //在当天数据与手还保持一致
        if(!BraceleteConst.day.equals(curday)) {
            String distance_ = sportTotalData.getDistance();
            DecimalFormat df = new DecimalFormat("#0.00");//格式化小数

            if(distance_!=null){
                double distance = Double.parseDouble(distance_)/1000;
                tv_distance.setText(df.format(distance) + "千米");

                float h = (float) (Const.MIN_PERkM* distance /60);
                tv_hours.setText(df.format(h)+"小时");
            }

            String   step = sportTotalData.getSteps();
            tv_cur_step.setText(step+"步");


            String cal=  sportTotalData.getCal();
            if(cal !=null){
                int calInt = Integer.valueOf(cal)/1000;
                tv_kal.setText(calInt+"千卡");
            }

            if(step!=null){
                int progress_ = Integer.valueOf(step) * 100/ goal;
                //float progress = Float.parseFloat(df.format(progress_));
                OemLog.log("arcview", "refresh;;;;" + step + "progress" + progress_);

                arcView.setProgressInfo(Integer.valueOf(step), goal, progress_);
            }

        }
    }


    public void initchar(){

        mChart.setDrawBarShadow(false);
        mChart.setDrawValueAboveBar(false);

        mChart.setDescription("");
        mChart.setNoDataText("无数据");

        // if more than 60 entries are displayed in the chart, no values will be
        // drawn
        mChart.setMaxVisibleValueCount(60);

        mChart.setDoubleTapToZoomEnabled(false);
        // scaling can now only be done on x- and y-axis separately
        mChart.setPinchZoom(false);

        mChart.setDrawGridBackground(false);
        mChart.setDrawValueAboveBar(true);

        mChart.setAutoScaleMinMaxEnabled(false);
        mChart.setScaleYEnabled(true);

        mtf = Typeface.createFromAsset(getActivity().getAssets(), "OpenSans-Regular.ttf");

        XAxis xAxis = mChart.getXAxis();
        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        xAxis.setTypeface(mtf);
        xAxis.setDrawGridLines(false);
        xAxis.setSpaceBetweenLabels(3);


        YAxis leftAxis = mChart.getAxisLeft();

        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
        //n  leftAxis.setSpaceTop(10f);
        leftAxis.setDrawGridLines(false);
        leftAxis.setDrawAxisLine(false);
        leftAxis.setDrawLabels(false);
        mChart.getAxisRight().setEnabled(false);
        mChart.getLegend().setEnabled(false);
        mChart.setOnChartValueSelectedListener(this);

    }

    private void setData(List<BraceleteHistory> sportDataDays) {

        ArrayList<String> xVals = new ArrayList<String>();
        ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();
        ArrayList<Integer> vals =new ArrayList<>();
        for (int i = 0; i < mTimes.length; i++) {
            xVals.add(mTimes[i]);
        }

        for(int j =0; j<sportDataDays.size(); j++) {
            String steps = sportDataDays.get(j).getSteps();
            int step = Integer.valueOf(steps);
            String cal = sportDataDays.get(j).getCal();
            int calINt = Integer.valueOf(cal);
            int hour = Integer.valueOf(sportDataDays.get(j).getHour());
            yVals1.add(new BarEntry(step, hour));

        }
        BarDataSet set1 = new BarDataSet(yVals1, "DataSet");

        //set1.setBarSpacePercent(35f);
        set1.setDrawValues(false);
        set1.setColor(getResources().getColor(R.color.shouhuan_day_bgcolor));
        set1.setHighLightColor(getResources().getColor(R.color.orange_bone));
        set1.setHighLightAlpha(255);
        //  set1.setHighlightEnabled(true);
        ArrayList<BarDataSet> dataSets = new ArrayList<>();
        dataSets.add(set1);

        BarData data = new BarData(xVals, dataSets);
        data.setValueTextSize(10f);
        data.setValueTypeface(mtf);
        mChart.setData(data);
        mChart.setVisibleXRangeMinimum(7);
        mChart.setScaleMinima(1.5f, 1f);
        mChart.setMarkerView(new StepMarkerView(mContext, R.layout.custom_marker_view_bp, sportDataDays));

        //    mChart.moveViewToX(6);
        mChart.invalidate();

    }

    @Override
    public void onValueSelected(Entry e, int dataSetIndex, Highlight h) {
        if (e == null)
            return;
        // Toast.makeText(mContext,"步数为：",Toast.LENGTH_LONG).show();

    }

    @Override
    public void onNothingSelected() {
        mChart.highlightValue(6, 0);
        // Toast.makeText(mContext,"noting：",Toast.LENGTH_LONG).show();

    }

    public void updateByDate(){

        //TODO 根据日期显示对应的运动信息
        getDayHistoryData();
    }



    private int count;
    private void getCountSplitBet(final String day){
        if(!NetTool.isNetwork(mContext, true)){
            return;
        }
        Common_dialog.startWaitingDialog(getActivity(), "正在加载数据...");
        String url = Base_Url.downloadcount;
        HashMap<String, Object> param = new HashMap<>();
        param.put("modelType", "braceletSports");
        param.put("url", url);
        param.put("beginDate", day + " 00:00:00");
        param.put("endDate",day +" 23:59:59");
        HistoryDownd.getHistory(mContext, param, new HistoryDownd.RegistOnGetResult() {
            @Override
            public void OnGetResult(int code, String msg, String data) {
                if (code == 11) {
                    MyApplication.getInstance().exit();
                    Toast.makeText(mContext, "用户未登陆,请重新登陆", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent(getActivity(), LoginActivity.class);
                    startActivity(intent);
                } else if (code == 0) {
                    count = Integer.valueOf(data);
                    Log.i("sportday", " from net  count is " + count + "条");

                    if (count > 0) {
                        //分页获取数据
                        int num = (int) Math.ceil((double) count / (double) 50);
                        for (int i = 0; i < num; i++) {

                            getDataSplitByNet(day, i * 50 + "", 50 + "");
                        }
                    } else {
                        //Toast.makeText(mContext, count + "条数据", Toast.LENGTH_LONG).show();
                        if (mChart.getData() != null) {
                            mChart.clear();
                            mChart.setNoDataText("无数据");
                        }
                        tv_kal.setText("0千卡");

                        tv_cur_step.setText("0步");
                        tv_distance.setText( "0千米");
                        tv_hours.setText("0小时");
                        arcView.setProgressInfo(0, 0, 0);
                        Common_dialog.stop_WaitingDialog();
                    }
                } else {
                    Toast.makeText(mContext, msg, Toast.LENGTH_LONG).show();
                    Common_dialog.stop_WaitingDialog();

                }
            }
        });
    }

    //从网上分页获取数据
    private void  getDataSplitByNet(String day, final String startNum, final String showCount){

        String url = Base_Url.batch_Download_Url;
        HashMap<String, Object> param = new HashMap<>();
        param.put("modelType", "braceletSports");
        param.put("url", url);
        param.put("beginDate", day+" 00:00:00");
        param.put("startNum",startNum );
        param.put("showCount",showCount );

        param.put("endDate", day + " 23:59:59");
        HistoryDownd.getHistory(mContext, param, new HistoryDownd.RegistOnGetResult() {
            @Override
            public void OnGetResult(int code, String msg, String data) {
                if (code == 11) {
                    MyApplication.getInstance().exit();
                    Toast.makeText(mContext, "用户未登陆,请重新登陆", Toast.LENGTH_SHORT).show();
                    Intent intent = new Intent(getActivity(), LoginActivity.class);
                    startActivity(intent);
                } else if (code == 0) {
                    List<BraceleteJson> list = JSON.parseArray(data, BraceleteJson.class);
                    Log.i("手还运动天",list.size()+"条");
                    if(list.size()>0){
                        for (int i = 0; i < list.size(); i++) {

                            long testime = list.get(i).getTestTime();
                            String time = TimeStampUtil.currTime3(testime + "");
                            Log.i("download", list.get(i).getCal() + "cal" + "----" + time);
                            //TODO INSERT INTO DB
                            SportDataDetailBean bean = new SportDataDetailBean();
                            bean.setDeviceId(BraceleteConst.mac);
                            bean.setUsername(list.get(i).getUsername());
                            bean.setLongTime(testime);
                            bean.setDistance(Integer.valueOf(list.get(i).getDistance()));
                            bean.setSteps(Integer.valueOf(list.get(i).getSteps()));
                            bean.setSamplePointTime(time);
                            bean.setCal(Integer.valueOf(list.get(i).getCal()));
                            bean.setYmd(TimeStampUtil.currTime3(testime));
                            bean.setHour(TimeStampUtil.getHour(testime) + "");
                            bean.setDay(TimeStampUtil.getDay(testime)+"");
                            bean.setDataSource("网上");
                            bean.setIsUpload(true);

                            try {
                                MyApplication.getDB().saveOrUpdate(bean);

                            } catch (DbException e) {
                                e.printStackTrace();
                            }

                        }
                        //展示数据
                        int start_num = Integer.valueOf(startNum);
                        int show_num = Integer.valueOf(showCount);
                        if(count<=start_num + show_num){
                            sportDataDays = BraceleteDataService.getSportDataDayDb(BraceleteConst.day);
                            if (sportDataDays != null && sportDataDays.size() > 0) {
                                sportTotalData = BraceleteDataService.getSportTotalDataDayDb(BraceleteConst.day);

                                setTextInfo();
                                setData(sportDataDays);
                                mChart.invalidate();
                            }else{
                                if(mChart.getData()!=null){
                                    mChart.clearValues();
                                }
                                tv_cur_step.setText(0+"");
                                tv_distance.setText("0千米");
                                tv_kal.setText("0千卡");
                                tv_hours.setText("0小时");
                                arcView.setProgressInfo(0, 0, 0);

                            }
                        }
                    }else{
                        if(mChart.getData()!=null){
                            mChart.clearValues();
                        }
                        tv_cur_step.setText(0+"");
                        tv_distance.setText("0千米");
                        tv_kal.setText("0千卡");
                        tv_hours.setText("0小时");
                        arcView.setProgressInfo(0, 0, 0);

                    }

                } else {
                    Toast.makeText(mContext, msg, Toast.LENGTH_LONG).show();
                }
                Common_dialog.stop_WaitingDialog();

            }
        });

    }

    @Override
    public void onResume() {
        super.onResume();
        String steps =PreferencesUtils.getString(mContext, MyApplication.getInstance().getCurrentUserName()+"goal_steps", "5000");
        goal = Integer.valueOf(steps);
        tv_goal.setText("目标：" + steps + "步");
        String curstep = tv_cur_step.getText().toString().trim().replace("步","");
        arcView.setProgressInfo(Integer.valueOf(curstep), goal, Integer.valueOf(curstep) * 100 / goal);

    }

    private void uploadSportDataTotal() {
        fillHearderInfo(sportDataTotalUploadJson);
        try {

            SportDataDetailBean sp;
            sportDataTotalJson.put("steps", sportDataTotalBean.getSteps());
            sportDataTotalJson.put("distance", sportDataTotalBean.getDistance());
            sportDataTotalJson.put("cal", sportDataTotalBean.getCal());
            sportDataTotalJson.put("testTime", System.currentTimeMillis());
            sportDataTotalJson.put("modelType", "braceletSportsTotal");
            sportDataTotalUploadJson.put("data", sportDataTotalJson.toString());
            OemLog.log(TAG, "upload json is " + sportDataTotalUploadJson.toString());
            HttpTools.post(mContext, Base_Url.Url_Base + Base_Url.uploadData_Url, sportDataTotalUploadJson, new AsyncHttpResponseHandler() {

                @Override
                public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
                    OemLog.log(TAG, "uploadSportDataTotal success result is " + new String(responseBody));
                    try {

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
//
                }

                @Override
                public void onCancel() {
                    super.onCancel();

                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private JSONObject fillHearderInfo(JSONObject jsonObject) {
        try {
            jsonObject.put("apikey", MyApplication.getInstance().apikey);
            jsonObject.put("username", MyApplication.getInstance().getCurrentUserName());
            jsonObject.put("token", MyApplication.getInstance().getCurentToken());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return jsonObject;

    }

    @Override
    public void onDestroy() {
        devicesDataObserver.unregisterObserver();
        devicesDataObserver = null;
        handler.removeCallbacksAndMessages(null);
        super.onDestroy();
    }
}
